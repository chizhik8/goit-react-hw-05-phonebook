{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Alert/Alert.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContactForm","state","name","number","handleInput","e","target","value","setState","handleSubmit","preventDefault","props","onAddContacts","CSSTransition","in","appear","timeout","classNames","onSubmit","this","type","onChange","Component","Alert","className","ContactList","contacts","onRemoveContact","TransitionGroup","component","map","contact","onClick","id","Filter","onInputFilter","App","filter","alert","addContacts","uuidv4","prevState","find","toLowerCase","addFilter","taskFilter","includes","removeContact","contactId","localStorage","getItem","JSON","parse","setItem","stringify","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86595a6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport './contactform.css';\r\n\r\nexport class ContactForm extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleInput = e => {\r\n    const { name, value } = e.target;\r\n    this.setState(() => {\r\n      return {\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    const { name, number } = this.state;\r\n    e.preventDefault();\r\n    this.props.onAddContacts(name, number);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <CSSTransition in={true} appear timeout={500} classNames=\"Logo\">\r\n          <h1>Phonebook</h1>\r\n        </CSSTransition>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={this.handleInput}\r\n              name=\"name\"\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              onChange={this.handleInput}\r\n              name=\"number\"\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport './alert.css';\r\n\r\nexport class Alert extends Component {\r\n  render() {\r\n    return (\r\n      <CSSTransition in={true} appear={true} timeout={1700} classNames=\"Alert\">\r\n        {/* <button type=\"button\" className=\"alert\">\r\n          Alredy in contacts!\r\n        </button> */}\r\n        <h2 className=\"alert\">Contact already exists!</h2>\r\n      </CSSTransition>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nimport './contactlist.css';\r\n\r\nexport default function ContactList({ contacts, onRemoveContact }) {\r\n  return (\r\n    <div>\r\n      <TransitionGroup component=\"ul\">\r\n        {contacts.map(contact => (\r\n          <CSSTransition key={contact.id} timeout={250} classNames=\"contacts\">\r\n            <li>\r\n              {' '}\r\n              {contact.name}: {contact.number}\r\n              <button type=\"button\" onClick={() => onRemoveContact(contact.id)}>\r\n                x\r\n              </button>\r\n            </li>\r\n          </CSSTransition>\r\n        ))}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Filter extends Component {\r\n\r\n    static propTypes = {\r\n           filter: PropTypes.string,\r\n       }\r\n\r\n    handleInput = (e) => {\r\n        this.props.onInputFilter(e.target.value)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Find contacts by name</h3>\r\n                <input type='text' onChange={this.handleInput} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filter\r\n","import React, { Component } from 'react';\r\n\r\nimport { ContactForm } from './components/ContactForm/ContactForm';\r\nimport { Alert } from './components/Alert/Alert';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Filter } from './components/Filter/Filter';\r\n\r\nexport class App extends Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n    alert: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (localStorage.getItem('contacts') !== null) {\r\n      this.setState({\r\n        contacts: JSON.parse(localStorage.getItem('contacts')),\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevState) {\r\n    if (prevState.contacts !== this.state.contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n    }\r\n  }\r\n\r\n  addContacts = (name, number) => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    };\r\n    this.setState({ alert: '' });\r\n\r\n    this.setState(prevState => {\r\n      if (\r\n        prevState.contacts.find(\r\n          contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n        )\r\n      ) {\r\n        // alert(`${name} is already in contacts`);\r\n        this.setState({ alert: true });\r\n        return;\r\n      }\r\n      return {\r\n        contacts: [...prevState.contacts, contact],\r\n      };\r\n    });\r\n  };\r\n\r\n  addFilter = filter => {\r\n    this.setState(() => {\r\n      return { filter: filter };\r\n    });\r\n  };\r\n\r\n  taskFilter = () => {\r\n    const { contacts, filter } = this.state;\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  };\r\n\r\n  removeContact = contactId => {\r\n    this.setState(prevState => {\r\n      return {\r\n        contacts: prevState.contacts.filter(\r\n          contact => contact.id !== contactId,\r\n        ),\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.alert && <Alert />}\r\n\r\n        <ContactForm onAddContacts={this.addContacts} />\r\n\r\n        {this.state.contacts.length ? (\r\n          <Filter onInputFilter={this.addFilter} />\r\n        ) : (\r\n          <h2>Contact list is empty. Please add contact.</h2>\r\n        )}\r\n\r\n        {this.state.filter.length ? (\r\n          <ContactList\r\n            contacts={this.taskFilter()}\r\n            onRemoveContact={this.removeContact}\r\n          />\r\n        ) : (\r\n          <ContactList\r\n            contacts={this.state.contacts}\r\n            onRemoveContact={this.removeContact}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />,document.getElementById('root'));\r\n"],"sourceRoot":""}